// ImageDecomp.h: interface for the CImageDecomp class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_IMAGEDECOMP_H__0139CB24_9639_47CC_AD07_5E4FCCA06B84__INCLUDED_)
#define AFX_IMAGEDECOMP_H__0139CB24_9639_47CC_AD07_5E4FCCA06B84__INCLUDED_

#include "Color.h"	// Added by ClassView
#include "Img.h"	// Added by ClassView
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

class CImageDecomp  
{
public:
	void * GetShadingBuf();
	void * GetAlbedoBuf();
	void decompImg();
	BOOL SaveScribbles();
	BOOL FlagMemRelease(int w, int h);
	void StoreFlags(int y, int x, BYTE type, int scribID);
	BOOL InitFlags(int w, int h);
	void LoadSrcImage(CString pathnam, int height, int width, int bitdep, int type, int format=0);
	CImageDecomp(int x, int y);
	CImageDecomp();
	virtual ~CImageDecomp();

private:
	BOOL Img2buf(Img &shadingImg, Img &albedoImg);
	BYTE * shadingImgBuf;
	BYTE * albedoImgBuf;
	Img *imgIn;
	int fixShadingNum;
	int shadingNum;
	int albedoNum;
	Img *scribbleFixShadingImg;
	Img *scribbleAlbedoImg;
	Img *scribbleShadingImg;
	BOOL FlagMemAlloc(int w, int h);
	BYTE ** flagMatrix;
	void HeadStand(void *buffer, int height, int width, int bitdep);
	void LoadRgbImage();
	void LoadBmpImage();
	void LoadYuvImage(int format=0);
	Img solve(Img imgIn, Img &imgScribbleAbsolute,Img imgScribbleSimAlbedo,Img imgScribbleSimShading,int maxAlbedoNum, int maxShadingNum, Color* albedoNumColors, Color* shadingNumColors);
	void buildLMatrix(Img imgIn);
	BOOL ImgIn();
	int bitDepth;
	BYTE * imgBuf;
	BYTE * rgbBuf;
	int imgHeight;
	int imgWidth;
	BYTE scribbletype;
	// generated by the image decomposition
	Img albedoImg;	  //the reflectance image 
	Img shadingImg;   //the illumination image
};

#define FORMAT_444	0
#define FORMAT_420	1
#define FORMAT_400	2

#define TYPE_BMP		0
#define TYPE_RGB		1			//r..... g..... b....
#define TYPE_YUV		2

//----- LMatrix initialization -----//

#define WSIZE 3 //size of the local windows
#define WSIZE2 9 //WSIZE2 = WSIZE*WSIZE, number of pixels in each window ('n' in the paper)
#define MSIZE 12 //WSIZE2+3, number of rows in the M matrix (see equation 8)
#define WSIZE_2 1 //WSIZE_2 = WSIZE/2
#define SIZE_N 5 //2*2*WSIZE_2+1, size of the total neighborhood affected by a pixel
#define SIZE_N2 25 //SIZE_N*SIZE_N, number of non-zero element per-pixel in the L matrix 
#define EPSILON_PIXEL_VAL 0.001 //accuracy threshold

extern  double ** LMatrix;
extern  Img result;
//extern  double **M;

#endif // !defined(AFX_IMAGEDECOMP_H__0139CB24_9639_47CC_AD07_5E4FCCA06B84__INCLUDED_)
